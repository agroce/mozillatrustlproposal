We will work with members of the Rust language and development tools teams to ensure TruSTL is informed by the current and long-term plans of the Rust team.  We have already spoken with Aaron Turan, Nick Cameron, Manish Goregaokar, and Niko Matsakis about the general idea for TruSTL and (specifically) about how it fits in with the current proposal for custom test frameworks.

The primary technical method for reaching Mozilla (and the wider Rust community) is through (1) publishing the TruSTL code as a Rust crate and (2) putting the source code in a public github repository.  Ideally, even during the initial period of the research grant, there may be contributions from interested parties outside the core team.  TSTL's Python 3 support was contributed by an excited user who wanted to be able to apply the tool in that setting, for example.  The "social" aspect of getting results out will be to use the tool prototypes on important libraries, report bugs found, and thus make the benefits of adding TruSTL automation to testing clear to the community.

Dissemenation to the larger academic community would take two forms:  first, a tool paper at ICSE, ISSTA, or another major testing-related conference, describing the tool itself, and, second, a research paper describing the results of our investigation into tuning a high-performance property-based fuzzer, and integrating property-based testing in an imperative setting with existing fuzzers.  It is likely that the DSL challenges of fully using the power of the Rust type system would provide material for a third paper, covering the novel ideas, specification patterns, and code generation techniques enabled by Rust.
