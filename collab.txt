We will work with members of the Rust language team and the development tools team to ensure TruSTL is informed by the current and long-term plans of the Rust team.  I have already spoken with Aaron Turan, Nick Cameron, Manish Goregaokar, and Niko Matsakis some about the general idea and (specifically) with the current proposal for custom test frameworks.

Getting results to Mozilla should be easy:  publish the TruSTL code as a Rust crate and send Mozilla the public github repository.  Dissemenation to the larger academic community would take two forms:  first, a tool paper at ICSE, ISSTA, or another major conference, describing the tool itself, and, second, a research paper describing the results of our investigation into tuning a high-performance property-based fuzzer, and integrating property-based testing in an imperative setting with existing fuzzers.  It is likely that the DSL challenges of fully using the power of the Rust type system would be material for a third paper, covering the novel ideas, specification patterns, and code generation techniques enabled by Rust.
